
package templates
import (
	"fmt"
    "time"
	"goth/internal/store"
)

templ Weekly(course, specs, groupNames []store.Schedule, schedules []store.DayScheduels) {
	<p>weekly things test </p>
    <label>course:</label>
        <select name=" course" id="course">
            for _, course := range course {
                <option value={ fmt.Sprintf("%d",course.Course) }>{ fmt.Sprintf("%d",course.Course) }</option> 
            }
        </select>

    <label>Spec:</label>
        <select name="spec" id="spec">
            for _, spec := range specs {
                <option value={ spec.Spec }> { spec.Spec }</option> 
            } 
        </select>
    <label>groupName:</label>
        <select name="group_name" id="group_name">
            for _, groupName := range groupNames {
                <option value={ fmt.Sprintf("%d", groupName.GroupName) }>{ fmt.Sprintf("%d", groupName.GroupName) }</option> 
            }  
        </select>



    <div class="calendar">
    <div class="timeline">
        <div class="spacer"></div>
        <div class="time-marker">8:00</div>
        <div class="time-marker">9:00</div>
        <div class="time-marker">10:00</div>
        <div class="time-marker">11:00</div>
        <div class="time-marker">12:00</div>
        <div class="time-marker">13:00</div>
        <div class="time-marker">14:00</div>
        <div class="time-marker">15:00</div>
        <div class="time-marker">16:00</div>
        <div class="time-marker">17:00</div>
        <div class="time-marker">18:00</div>
        <div class="time-marker">19:00</div>
    </div>
    <div class="days">
        for _, schedules := range schedules{

            <div class={"day", schedules.Day }>
            <div class="date">
                <p class="date-day"> { schedules.Day } </p>
            </div>

            <div class="events">
            for _, schedule := range schedules.Shedule {
                <div class={"event", formatEndStart(schedule.Start, schedule.End),"securities"}>
                    <p class="title">{ schedule.Title }</p>
                    <p class="time"> { schedule.Start.Format("15:04") }</p> // need to make font smolar move up etc
                    // add other data 
                    // make it clicable 
                </div>
   
            }
            </div>
            </div>
            
        }   
    </div>
    </div>
}

func formatEndStart(start, end time.Time) string {
	startTime := start.Format("15")
	endTime := end.Format("15")
	return fmt.Sprintf("start-%s end-%s", startTime, endTime)
}

// func scheduleToDays(schedules []store.Schedule) map[time.Weekday][]store.Schedule{
//     scheduleByDays := make(map[time.Weekday][]store.Schedule)

//     for _, schedule := range schedules {
// 		weekday := schedule.Start.Weekday()
// 		fmt.Printf("Schedule ID: %d, Weekday: %s, Start: %s\n", schedule.ID, weekday, schedule.Start)
// 		scheduleByDays[weekday] = append(scheduleByDays[weekday], schedule)
// 	}

//     // for day, days := range scheduleByDays{

//     //     fmt.Println(day," : ",days)
//     // }
//     return scheduleByDays
// }


